generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id        Int       @id @default(autoincrement())
  clienteId String    @unique @default("")
  nome      String
  telefone  String    @unique
  email     String    @unique
  nif       String?   @unique
  morada    String
  tipo      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  servicos  Servico[]
}

model Equipamento {
  id          Int       @id @default(autoincrement())
  tipo        String
  marca       String
  modelo      String
  numeroSerie String?
  dataCompra  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  servicos    Servico[]
}

model Servico {
  id                String      @id @default("")
  servicoId         String      @unique @default("")
  clienteId         Int
  equipamentoId     Int
  tipo              String
  descricaoProblema String
  estado            String
  dataEntrada       DateTime
  dataDiagnostico   DateTime?
  dataReparacao     DateTime?
  tecnico           String?
  garantia          Boolean     @default(false)
  dataCompra        DateTime?
  documentoCompra   String?
  notas             String?
  valorTotal        Decimal?    @db.Decimal(10, 2)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deslocacao        Deslocacao?
  fotos             Foto[]
  historico         Historico[]
  maoDeObra         MaoDeObra?
  pecas             Peca[]
  cliente           Cliente     @relation(fields: [clienteId], references: [id])
  equipamento       Equipamento @relation(fields: [equipamentoId], references: [id])
}

model Historico {
  id        Int      @id @default(autoincrement())
  servicoId String
  data      DateTime @default(now())
  hora      String
  acao      String
  autor     String
  createdAt DateTime @default(now())
  servico   Servico  @relation(fields: [servicoId], references: [id])
}

model Foto {
  id        Int      @id @default(autoincrement())
  servicoId String
  descricao String
  url       String?
  createdAt DateTime @default(now())
  servico   Servico  @relation(fields: [servicoId], references: [id])
}

model Peca {
  id            Int      @id @default(autoincrement())
  servicoId     String
  codigo        String
  nome          String
  quantidade    Int
  precoUnitario Decimal  @db.Decimal(10, 2)
  total         Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  servico       Servico  @relation(fields: [servicoId], references: [id])
}

model MaoDeObra {
  id        Int      @id @default(autoincrement())
  servicoId String   @unique
  horas     Decimal  @db.Decimal(10, 2)
  valorHora Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  servico   Servico  @relation(fields: [servicoId], references: [id])
}

model Deslocacao {
  id        Int      @id @default(autoincrement())
  servicoId String   @unique
  km        Decimal  @db.Decimal(10, 2)
  valorKm   Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  servico   Servico  @relation(fields: [servicoId], references: [id])
}

// Modelo para autenticação
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Hash da password com bcrypt
  name      String
  role      String   @default("admin") // Para futuras expansões
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
