generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id        Int       @id @default(autoincrement())
  clienteId String    @unique @default("")
  nome      String
  telefone  String    @unique
  email     String    @unique
  nif       String?   @unique
  morada    String
  tipo      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  servicos  Servico[]
}

model Equipamento {
  id          Int       @id @default(autoincrement())
  tipo        String
  marca       String
  modelo      String
  numeroSerie String?
  dataCompra  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  servicos    Servico[]
}

model Servico {
  id                String      @id @default("")
  servicoId         String      @unique @default("")
  clienteId         Int
  equipamentoId     Int
  tipo              String
  descricaoProblema String
  estado            String
  dataEntrada       DateTime
  dataDiagnostico   DateTime?
  dataReparacao     DateTime?
  tecnico           String?
  garantia          Boolean     @default(false)
  dataCompra        DateTime?
  documentoCompra   String?
  notas             String?
  valorTotal        Decimal?    @db.Decimal(10, 2)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deslocacao        Deslocacao?
  fotos             Foto[]
  historico         Historico[]
  maoDeObra         MaoDeObra?
  pecas             Peca[]
  cliente           Cliente     @relation(fields: [clienteId], references: [id])
  equipamento       Equipamento @relation(fields: [equipamentoId], references: [id])
}

model Historico {
  id        Int      @id @default(autoincrement())
  servicoId String
  data      DateTime @default(now())
  hora      String
  acao      String
  autor     String
  createdAt DateTime @default(now())
  servico   Servico  @relation(fields: [servicoId], references: [id])
}

model Foto {
  id        Int      @id @default(autoincrement())
  servicoId String
  descricao String
  url       String?
  createdAt DateTime @default(now())
  servico   Servico  @relation(fields: [servicoId], references: [id])
}

model Peca {
  id            Int      @id @default(autoincrement())
  servicoId     String
  codigo        String
  nome          String
  quantidade    Int
  precoUnitario Decimal  @db.Decimal(10, 2)
  total         Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  servico       Servico  @relation(fields: [servicoId], references: [id])
}

model MaoDeObra {
  id        Int      @id @default(autoincrement())
  servicoId String   @unique
  horas     Decimal  @db.Decimal(10, 2)
  valorHora Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  servico   Servico  @relation(fields: [servicoId], references: [id])
}

model Deslocacao {
  id        Int      @id @default(autoincrement())
  servicoId String   @unique
  km        Decimal  @db.Decimal(10, 2)
  valorKm   Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  servico   Servico  @relation(fields: [servicoId], references: [id])
}

// Modelo para autenticação
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Hash da password com bcrypt
  name      String
  role      String   @default("admin") // Para futuras expansões
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relações para configurações
  userSettings  UserSettings?
  notifications Notification[]
  sessions      UserSession[]
  backups       Backup[]
}

// Configurações do utilizador
model UserSettings {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Aparência
  theme        String   @default("system") // "light", "dark", "system"
  colorScheme  String   @default("blue")
  fontSize     String   @default("medium")
  compactMode  Boolean  @default(false)
  
  // Perfil
  phone        String?
  position     String?
  department   String?
  address      String?
  city         String?
  postalCode   String?
  bio          String?
  avatarUrl    String?
  
  // Notificações
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  emailFrequency        String  @default("immediate") // "immediate", "hourly", "daily"
  quietHours           Boolean @default(false)
  quietStart           String  @default("22:00")
  quietEnd             String  @default("08:00")
  weekendNotifications Boolean @default(true)
  
  // Email settings específicas
  emailNewService      Boolean @default(true)
  emailServiceUpdates  Boolean @default(true)
  emailClientMessages  Boolean @default(false)
  emailSystemAlerts    Boolean @default(true)
  emailDailyReport     Boolean @default(false)
  emailWeeklyReport    Boolean @default(true)
  
  // Push settings específicas
  pushUrgentServices   Boolean @default(true)
  pushServiceCompleted Boolean @default(false)
  pushClientNotifications Boolean @default(true)
  pushSystemAlerts     Boolean @default(true)
  pushReminders        Boolean @default(true)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Notificações do sistema
model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type      String   // "service", "system", "client", "alert"
  title     String
  message   String
  data      Json?    // Dados adicionais como IDs de serviços, etc.
  
  read      Boolean  @default(false)
  readAt    DateTime?
  
  createdAt DateTime @default(now())
  
  @@index([userId, createdAt])
}

// Sessões de utilizador para segurança
model UserSession {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  device     String?   // "Windows PC - Chrome"
  ipAddress  String
  location   String?   // "Lisboa, Portugal"
  userAgent  String?
  
  isActive   Boolean   @default(true)
  lastActive DateTime  @default(now())
  expiresAt  DateTime
  
  createdAt  DateTime  @default(now())
  
  @@index([userId, isActive])
}

// Logs de acesso e segurança
model AccessLog {
  id        String   @id @default(cuid())
  userId    String?  // Pode ser null para tentativas falhadas
  
  action    String   // "login", "logout", "failed_login", etc.
  ipAddress String
  location  String?
  device    String?
  userAgent String?
  
  success   Boolean
  details   Json?    // Detalhes adicionais
  
  createdAt DateTime @default(now())
  
  @@index([userId, createdAt])
  @@index([action, createdAt])
}

// Backups da base de dados
model Backup {
  id          String   @id @default(cuid())
  userId      String?  // Quem iniciou (null para automático)
  user        User?    @relation(fields: [userId], references: [id])
  
  filename    String
  size        BigInt   // Tamanho em bytes
  type        String   // "automatic", "manual"
  status      String   // "pending", "completed", "failed"
  
  startedAt   DateTime @default(now())
  completedAt DateTime?
  errorMessage String?
  
  @@index([status, startedAt])
}

// Configurações do sistema
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String   // "database", "email", "security", etc.
  
  updatedAt   DateTime @updatedAt
  updatedBy   String?  // ID do utilizador que alterou
  
  @@index([category])
}

// Tarefas de manutenção
model MaintenanceTask {
  id          String    @id @default(cuid())
  name        String
  description String
  category    String    // "optimization", "cleanup", "backup"
  frequency   String    // "daily", "weekly", "monthly"
  
  lastRun     DateTime?
  nextRun     DateTime?
  status      String    @default("pending") // "pending", "running", "completed", "failed"
  
  enabled     Boolean   @default(true)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([status, nextRun])
}
