generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id        Int       @id @default(autoincrement())
  clienteId String    @unique @default("")
  nome      String
  telefone  String    @unique
  email     String?   @unique
  nif       String?   @unique
  morada    String
  tipo      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  servicos  Servico[]
}

model Equipamento {
  id          Int       @id @default(autoincrement())
  tipo        String
  marca       String
  modelo      String
  numeroSerie String?
  dataCompra  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  servicos    Servico[]
}

model Servico {
  id                String      @id @default("")
  servicoId         String      @unique @default("")
  clienteId         Int
  equipamentoId     Int
  tipo              String
  descricaoProblema String
  estado            String
  dataEntrada       DateTime
  dataDiagnostico   DateTime?
  dataReparacao     DateTime?
  tecnico           String?
  garantia          Boolean     @default(false)
  dataCompra        DateTime?
  documentoCompra   String?
  notas             String?
  valorTotal        Decimal?    @db.Decimal(10, 2)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deslocacao        Deslocacao?
  fotos             Foto[]
  historico         Historico[]
  maoDeObra         MaoDeObra?
  pecas             Peca[]
  cliente           Cliente     @relation(fields: [clienteId], references: [id])
  equipamento       Equipamento @relation(fields: [equipamentoId], references: [id])
}

model Historico {
  id        Int      @id @default(autoincrement())
  servicoId String
  data      DateTime @default(now())
  hora      String
  acao      String
  autor     String
  createdAt DateTime @default(now())
  servico   Servico  @relation(fields: [servicoId], references: [id])
}

model Foto {
  id        Int      @id @default(autoincrement())
  servicoId String
  descricao String?
  url       String
  createdAt DateTime @default(now())
  publicId  String?
  updatedAt DateTime @default(now()) @updatedAt
  servico   Servico  @relation(fields: [servicoId], references: [id], onDelete: Cascade)
}

model Peca {
  id            Int      @id @default(autoincrement())
  servicoId     String
  codigo        String
  nome          String
  quantidade    Int
  precoUnitario Decimal  @db.Decimal(10, 2)
  total         Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  servico       Servico  @relation(fields: [servicoId], references: [id])
}

model MaoDeObra {
  id        Int      @id @default(autoincrement())
  servicoId String   @unique
  horas     Decimal  @db.Decimal(10, 2)
  valorHora Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  servico   Servico  @relation(fields: [servicoId], references: [id])
}

model Deslocacao {
  id        Int      @id @default(autoincrement())
  servicoId String   @unique
  km        Decimal  @db.Decimal(10, 2)
  valorKm   Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  servico   Servico  @relation(fields: [servicoId], references: [id])
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  name          String
  role          String         @default("admin")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  backups       Backup[]
  notifications Notification[]
  sessions      UserSession[]
  userSettings  UserSettings?
}

model UserSettings {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  theme                   String   @default("system")
  colorScheme             String   @default("blue")
  fontSize                String   @default("medium")
  compactMode             Boolean  @default(false)
  phone                   String?
  position                String?
  department              String?
  address                 String?
  city                    String?
  postalCode              String?
  bio                     String?
  avatarUrl               String?
  emailNotifications      Boolean  @default(true)
  pushNotifications       Boolean  @default(true)
  emailFrequency          String   @default("immediate")
  quietHours              Boolean  @default(false)
  quietStart              String   @default("22:00")
  quietEnd                String   @default("08:00")
  weekendNotifications    Boolean  @default(true)
  emailNewService         Boolean  @default(true)
  emailServiceUpdates     Boolean  @default(true)
  emailClientMessages     Boolean  @default(false)
  emailSystemAlerts       Boolean  @default(true)
  emailDailyReport        Boolean  @default(false)
  emailWeeklyReport       Boolean  @default(true)
  pushUrgentServices      Boolean  @default(true)
  pushServiceCompleted    Boolean  @default(false)
  pushClientNotifications Boolean  @default(true)
  pushSystemAlerts        Boolean  @default(true)
  pushReminders           Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  read      Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model UserSession {
  id         String   @id @default(cuid())
  userId     String
  device     String?
  ipAddress  String
  location   String?
  userAgent  String?
  isActive   Boolean  @default(true)
  lastActive DateTime @default(now())
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
}

model AccessLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  ipAddress String
  location  String?
  device    String?
  userAgent String?
  success   Boolean
  details   Json?
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@index([action, createdAt])
}

model Backup {
  id           String    @id @default(cuid())
  userId       String?
  filename     String
  size         BigInt
  type         String
  status       String
  startedAt    DateTime  @default(now())
  completedAt  DateTime?
  errorMessage String?
  user         User?     @relation(fields: [userId], references: [id])

  @@index([status, startedAt])
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  @@index([category])
}

model MaintenanceTask {
  id          String    @id @default(cuid())
  name        String
  description String
  category    String
  frequency   String
  lastRun     DateTime?
  nextRun     DateTime?
  status      String    @default("pending")
  enabled     Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([status, nextRun])
}
